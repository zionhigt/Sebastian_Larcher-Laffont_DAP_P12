# Generated by Django 4.0.4 on 2022-05-01 11:43

from django.db import migrations


def create_roles(apps, schema_migration):
    Role = apps.get_model('authentication', "Role")
    default_role = [
        "MANAGER",
        "SUPPORT",
        "SALESMAN"
    ]
    for i in default_role:
        try:
            Role.objects.get(name=i)
        except Role.DoesNotExist: 
            role = Role(name=i)
            role.save()
    return

def create_groups(apps, schema_migration):
    User = apps.get_model('authentication', 'User')
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    add_user = Permission.objects.get(codename='add_user')
    change_user = Permission.objects.get(codename='change_user')
    delete_user = Permission.objects.get(codename='delete_user')
    view_user = Permission.objects.get(codename='view_user')

    add_contrat = Permission.objects.get(codename='add_contrat')
    change_contrat = Permission.objects.get(codename='change_contrat')
    delete_contrat = Permission.objects.get(codename='delete_contrat')
    view_contrat = Permission.objects.get(codename='view_contrat')

    add_event = Permission.objects.get(codename='add_event')
    change_event = Permission.objects.get(codename='change_event')
    delete_event = Permission.objects.get(codename='delete_event')
    view_event = Permission.objects.get(codename='view_event')

    add_customer = Permission.objects.get(codename='add_customer')
    change_customer = Permission.objects.get(codename='change_customer')
    delete_customer = Permission.objects.get(codename='delete_customer')
    view_customer = Permission.objects.get(codename='view_customer')

    
    manager_permissions = [
        add_user,
        change_user,
        delete_user,
        view_user,
        add_contrat,
        change_contrat,
        delete_contrat,
        view_contrat,
        add_event,
        change_event,
        delete_event,
        view_event,
        add_customer,
        change_customer,
        delete_customer,
        view_customer,
    ]
    
    managers = Group(name='managers')
    managers.save()
    managers.permissions.set(manager_permissions)

    support_permissions = [
        add_event,
        change_event,
        delete_event,
        view_event,
        view_user,
        view_contrat,
        view_customer,
    ]
    supports = Group(name='supports')
    supports.save()
    supports.permissions.set(support_permissions)

    salesman_permissions = [
        add_contrat,
        change_contrat,
        delete_contrat,
        view_contrat,
        add_customer,
        change_customer,
        delete_customer,
        view_user,
        view_customer,
        view_event,
    ]
    salesmans = Group(name='salesmans')
    salesmans.save()
    salesmans.permissions.set(salesman_permissions)
    
    for user in User.objects.all():
        if user.role is not None:
            if user.role.name == 'MANAGER':
                managers.user_set.add(user)
            if user.role.name == 'SUPPORT':
                supports.user_set.add(user)
            if user.role.name == 'SALESMAN':
                salesmans.user_set.add(user)


class Migration(migrations.Migration):

    dependencies = [
        ('authentication', '0002_role_alter_user_options_user_manager_id_and_more'),
        ('event', '0002_alter_event_description'),
        ('contrat', '0001_initial'),
        ('customer', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_groups),
        migrations.RunPython(create_roles),
    ]
